---
import Button from './ui/button.astro';

interface PricingPlan {
  name: string;
  price: number;
  originalPrice?: number;
  currency: string;
  classes: number;
  freeClasses?: number;
  pricePerClass: number;
  popular?: boolean;
  features: string[];
  buttonText: string;
  buttonVariant: 'primary' | 'secondary';
}

const pricingPlans: PricingPlan[] = [
  {
    name: "1.5 Month",
    price: 336,
    originalPrice: 360,
    currency: "USD",
    classes: 12,
    freeClasses: 1,
    pricePerClass: 28,
    features: [
      "12 personalized classes",
      "+1 FREE lesson",
      "2 lessons/week",
      "Custom materials",
      "WhatsApp support"
    ],
    buttonText: "Get Started",
    buttonVariant: "secondary"
  },
  {
    name: "3 Months",
    price: 624,
    originalPrice: 720,
    currency: "USD",
    classes: 24,
    freeClasses: 3,
    pricePerClass: 26,
    features: [
      "24 personalized classes",
      "+3 FREE lessons",
      "2 lessons/week",
      "Custom materials",
      "WhatsApp support",
      "Flexible scheduling"
    ],
    buttonText: "Get Started",
    buttonVariant: "secondary"
  },
  {
    name: "6 Months",
    price: 1104,
    originalPrice: 1440,
    currency: "USD",
    classes: 48,
    freeClasses: 10,
    pricePerClass: 23,
    popular: true,
    features: [
      "48 personalized classes",
      "+10 FREE lessons",
      "2 lessons/week",
      "Weekly progress reports",
      "24/7 WhatsApp support",
      "Flexible scheduling"
    ],
    buttonText: "Best-selling",
    buttonVariant: "primary"
  },
  {
    name: "12 Months",
    price: 1920,
    originalPrice: 2880,
    currency: "USD",
    classes: 96,
    freeClasses: 30,
    pricePerClass: 20,
    features: [
      "96 personalized classes",
      "+30 FREE lessons",
      "2 lessons/week",
      "Daily practice materials",
      "Priority scheduling",
      "24/7 WhatsApp support",
      "Advanced conversation practice"
    ],
    buttonText: "Best Value",
    buttonVariant: "secondary"
  }
];

---

<section class="py-16 bg-[var(--background-primary)]">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-24 mb-12">
    <div class="text-center mb-6">
      <div class="relative inline-block">
        <!-- Estrellas decorativas -->
        <svg width="160" height="120" viewBox="0 0 320 240" fill="none" xmlns="http://www.w3.org/2000/svg" class="absolute top-[-60px] right-[-110px] z-10 pointer-events-none">
          <path
            d="M110 15 Q118 45 140 55 Q118 65 110 95 Q102 65 80 55 Q102 45 110 15"
            stroke="#000000"
            stroke-width="3"
            stroke-linecap="round"
            stroke-linejoin="round"
            fill="none"
          />
          <path
            d="M65 80 Q70 100 85 108 Q70 116 65 136 Q60 116 45 108 Q60 100 65 80"
            stroke="#000000"
            stroke-width="3"
            stroke-linecap="round"
            stroke-linejoin="round"
            fill="none"
          />
        </svg>
        <h2 class="text-6xl font-satoshi font-extrabold mb-6">Choose Your Plan</h2>
      </div>
      <p class="text-lg font-satoshi font-semibold max-w-2xl mx-auto mb-2">
        Find the perfect learning program that fits your goals and schedule. All plans include personalized attention and native speaker expertise.
      </p>
    </div>

    <div class="flex justify-center gap-3 mb-12">
      <div class="normal-button-container relative" id="normal-container">
        <Button 
            variant="secondary" 
            size="lg" 
            rounded={true}
            class="normal-button transition-all duration-300 hover:scale-105"
        >
            Normal
        </Button>
        <div class="normal-description absolute top-full mt-2 left-1/2 transform -translate-x-1/2 bg-white px-4 py-2 rounded-lg border-2 border-gray-200 shadow-md opacity-0 scale-95 transition-all duration-300 whitespace-nowrap">
          <span class="text-sm font-semibold text-gray-700">2 times per week</span>
        </div>
      </div>
      <div class="intensive-button-container relative" id="intensive-container">
        <Button 
            variant="primary" 
            size="lg" 
            rounded={true}
            shadow={true}
            class="intensive-button transition-all duration-300 hover:scale-105"
        >
            Intensive
        </Button>
        <div class="intensive-description absolute top-full mt-2 left-1/2 transform -translate-x-1/2 bg-white px-4 py-2 rounded-lg border-2 border-gray-200 shadow-md opacity-0 scale-95 transition-all duration-300 whitespace-nowrap">
          <span class="text-sm font-semibold text-gray-700">3+ times per week</span>
        </div>
      </div>
    </div>
    
    <!-- Intensive Program Message (initially hidden) -->
    <div id="intensive-message" class="hidden grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 transition-all duration-500 transform scale-95 opacity-0 mb-24">
      <div class="lg:col-span-4 md:col-span-2 col-span-1 bg-white rounded-2xl p-8 border-4 border-gray-300 shadow-[6px_6px_0px_0px_#6b7280] text-center flex flex-col justify-center min-h-[400px]">
        <h3 class="text-3xl font-satoshi font-extrabold mb-6 text-gray-700">Intensive Program</h3>
        <p class="text-lg font-satoshi text-gray-700 mb-8 leading-relaxed max-w-3xl mx-auto">
          To take intensive classes (3 or more times per week), a meeting is required to discuss the student's needs and go over pricing. This allows us to create a personalized program that fits their goals and ensures meaningful progress.
        </p>
        <div class="flex justify-center">
          <Button 
            variant="primary" 
            size="lg" 
            rounded={true}
            shadow={true}
            href="/schedule-class"
          >
            Schedule Free Class
          </Button>
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8" id="pricing-cards">
      {pricingPlans.map((plan) => (
        <div class={`bg-white rounded-2xl p-6 border-4 border-gray-200 transition-all duration-200 hover:-translate-y-1 relative flex flex-col ${plan.popular ? 'shadow-[6px_6px_0px_0px_#000000] border-4 border-[var(--button-primary)]' : 'shadow-[6px_6px_0px_0px_#000000]'}`}>
          
          {plan.popular && (
            <div class="absolute -top-3 left-1/2 transform -translate-x-1/2">
              <Button variant="primary" size="xs" class="pointer-events-none sm:px-4 sm:py-1.5 sm:text-sm">  
                Most Popular
              </Button>
            </div>
          )}
          
          <div class="text-center mb-4">
            <h3 class="text-xl font-satoshi font-bold mb-2">{plan.name}</h3>
            
            <div class="mb-2">
              {plan.originalPrice && (
                <span class="text-gray-500 line-through text-sm">${plan.originalPrice} {plan.currency}</span>
              )}
              <div class="text-3xl font-satoshi font-extrabold text-gray-900">
                ${plan.price} <span class="text-lg font-normal">{plan.currency}</span>
              </div>
            </div>
            
            <div class="text-sm text-gray-600 mb-1">
              ${plan.pricePerClass}/class
            </div>
            
            <div class="text-sm font-semibold text-[var(--button-primary)]">
              {plan.classes} classes{plan.freeClasses ? ` + ${plan.freeClasses} FREE` : ''}
            </div>
          </div>
          
          <ul class="space-y-2 mb-4 text-sm flex-grow">
            {plan.features.map((feature) => (
              <li class="flex items-start">
                <svg class="w-4 h-4 text-[var(--button-primary)] mt-0.5 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                </svg>
                <span class="text-gray-700">{feature}</span>
              </li>
            ))}
          </ul>
          
          <div class="mt-auto">
            <Button 
              variant={plan.buttonVariant}
              size="md"
              fullWidth={true}
              rounded={true}
              shadow={plan.popular}
              href="/schedule-class"
            >
              {plan.buttonText}
            </Button>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  .normal-button-container:hover .normal-button {
    transform: scale(1.1);
  }
  
  .normal-button-container:hover .normal-description {
    opacity: 1;
    transform: translateX(-50%) scale(1);
  }
  
  .intensive-button-container:hover .intensive-button {
    transform: scale(1.1);
  }
  
  .intensive-button-container:hover .intensive-description {
    opacity: 1;
    transform: translateX(-50%) scale(1);
  }
  
  .normal-description,
  .intensive-description {
    z-index: 10;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }
  
  .normal-description::before,
  .intensive-description::before {
    content: '';
    position: absolute;
    top: -6px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-bottom: 6px solid #e5e7eb;
  }
  
  .normal-description::after,
  .intensive-description::after {
    content: '';
    position: absolute;
    top: -4px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-bottom: 5px solid white;
    }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const intensiveContainer = document.getElementById('intensive-container');
    const normalContainer = document.getElementById('normal-container');
    const intensiveMessage = document.getElementById('intensive-message');
    const pricingCards = document.getElementById('pricing-cards');
    
    // Handle intensive button click
    if (intensiveContainer) {
      const intensiveButton = intensiveContainer.querySelector('.intensive-button');
      if (intensiveButton) {
        intensiveButton.addEventListener('click', function(e) {
          e.preventDefault();
          
          // Hide pricing cards with fade out
          if (pricingCards) {
            pricingCards.style.transition = 'all 0.5s ease-out';
            pricingCards.style.opacity = '0';
            pricingCards.style.transform = 'scale(0.95)';
            
            setTimeout(() => {
              pricingCards.style.display = 'none';
              
              // Show intensive message
              if (intensiveMessage) {
                intensiveMessage.classList.remove('hidden');
                setTimeout(() => {
                  intensiveMessage.style.opacity = '1';
                  intensiveMessage.style.transform = 'scale(1)';
                }, 50);
              }
            }, 500);
          }
        });
      }
    }
    
    // Handle normal button click
    if (normalContainer) {
      const normalButton = normalContainer.querySelector('.normal-button');
      if (normalButton) {
        normalButton.addEventListener('click', function(e) {
          e.preventDefault();
          
          // Hide intensive message if visible
          if (intensiveMessage && !intensiveMessage.classList.contains('hidden')) {
            intensiveMessage.style.transition = 'all 0.5s ease-out';
            intensiveMessage.style.opacity = '0';
            intensiveMessage.style.transform = 'scale(0.95)';
            
            setTimeout(() => {
              intensiveMessage.classList.add('hidden');
              
              // Show pricing cards
              if (pricingCards) {
                pricingCards.style.display = 'grid';
                setTimeout(() => {
                  pricingCards.style.opacity = '1';
                  pricingCards.style.transform = 'scale(1)';
                }, 50);
              }
            }, 500);
          }
        });
      }
    }
  });
</script>

 
